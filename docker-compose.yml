version: '3.8'

services:
  # RabbitMQ Service for SMS Message Processing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: store24h-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guesta
      - RABBITMQ_DEFAULT_PASS=guesta
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Service for All Environments (Local + Production)
  redis:
    image: redis:7-alpine
    container_name: store24h-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-store24h_redis_pass}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-store24h_redis_pass}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Hono.js Accelerator Microservice
  hono-accelerator:
    build: ./hono-accelerator
    container_name: store24h-hono-accelerator
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-store24h_redis_pass}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Main Application Service
  store24h-api:
    build: .
    container_name: store24h-api
    ports:
      - "80:80" # Map container port 80 to host port 80
    environment:
      # Application settings
      - LISTEN_PORT=80
      - SPRING_PROFILES_ACTIVE=docker

      # External MySQL Database settings (defined in .env file)
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      
      # External MongoDB settings (defined in .env file)
      - MONGO_URL=${MONGO_URL}

      # Redis Container settings (for all environments)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-store24h_redis_pass}

      # Database configuration
      - HIBERNATE_DDL_AUTO=${HIBERNATE_DDL_AUTO}
      
      # Redis configuration
      - USE_REDIS_REMOTE=false
      
      # Cache warming configuration - Optimized intervals
      - CACHE_WARMING_ENABLED=${CACHE_WARMING_ENABLED:-true}
      - CACHE_WARMING_SERVICES_RATE=${CACHE_WARMING_SERVICES_RATE:-900000}
      - CACHE_WARMING_CALLBACKS_RATE=${CACHE_WARMING_CALLBACKS_RATE:-900000}
      - CACHE_WARMING_USERS_RATE=${CACHE_WARMING_USERS_RATE:-900000}
      - CACHE_WARMING_NUMBERS_RATE=${CACHE_WARMING_NUMBERS_RATE:-600000}
      - CACHE_WARMING_CONFIGS_RATE=${CACHE_WARMING_CONFIGS_RATE:-900000}
      - CACHE_WARMING_BALANCE_RATE=${CACHE_WARMING_BALANCE_RATE:-1800000}
      - CACHE_WARMING_OPERATORS_RATE=${CACHE_WARMING_OPERATORS_RATE:-300000}
      
      # RabbitMQ configuration
      - RABBITMQ_HOST=rabbitmq

    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  app-network:
    driver: bridge