# External MySQL Database Configuration
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:zdb.cluster-akn911wxcp.us.aws.sms24h.org}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:coredb}
spring.datasource.username=${MYSQL_USER:coredbuser}
spring.datasource.password=${MYSQL_PASSWORD:78f77cfc780794aA#W}
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
# Hibernate Configuration (unified to prevent conflicts)
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL_AUTO:update}
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.open-in-view=false
# External MongoDB Configuration
spring.data.mongodb.uri=${MONGO_URL:mongodb://your-external-mongo-host:27017/ativacoes?connectTimeoutMS=300000&minPoolSize=100&maxPoolSize=450&maxIdleTimeMS=900000}

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Cache logging configuration - enable cache monitoring
logging.level.org.springframework.cache=INFO

# CDC Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.consumer.group-id=cache-sync-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval-ms=1000
spring.kafka.consumer.session-timeout-ms=30000
spring.kafka.consumer.heartbeat-interval-ms=10000
spring.kafka.consumer.max-poll-records=500
spring.kafka.consumer.fetch-min-size=1
spring.kafka.consumer.fetch-max-wait=500

# CDC Topics
cdc.topics.chip-model=cache-sync.chip_model
cdc.topics.chip-model-online=cache-sync.chip_model_online
cdc.topics.servicos=cache-sync.servicos
cdc.topics.operadoras=cache-sync.v_operadoras
cdc.topics.chip-number-control=cache-sync.chip_number_control
cdc.topics.alias-service=cache-sync.chip_number_control_alias_service
cdc.topics.usuario=cache-sync.usuario
cdc.topics.activation=cache-sync.activation

# CDC Performance Tuning
cdc.consumer.concurrency=3
cdc.consumer.max-poll-records=500
cdc.consumer.fetch-min-size=1
cdc.consumer.fetch-max-wait=500



#### logs sql
#
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
#logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
##log tipo 1
##logging.level.org.hibernate.SQL=DEBUG
##logging.level.org.hibernate.type.descriptor.sql=TRACE
##spring.jpa.properties.hibernate.format_sql=true
##log tipo 2
#logging.level.org.hibernate.SQL=OFF
#logging.level.org.hibernate.type.descriptor.sql=OFF
#spring.jpa.properties.hibernate.format_sql=true
## Log SQL queries with parameter values
#logging.level.org.hibernate.orm.jdbc.bind=TRACE
#
#logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=OFF

### Server Configuration
server.address=0.0.0.0
server.port=${LISTEN_PORT:80}
#server.ssl.key-store:/etc/letsencrypt/live/simsms.online/keystore.p12
#server.ssl.key-store-password: 78f77cfc780794aA#W
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat


security.require-ssl=false

forum.jwt.expiration=86400000
forum.jwt.secret=S@%wHsqyaB4%t#nwgf#xtdpK%5wsPMkodc#uKzWBDc&5zzJxH^


# Redis/Valkey Configuration - Disabled auto-configuration, using manual RedisConfig.java
# spring.redis.host=${REDIS_HOST:localhost}
# spring.redis.port=${REDIS_PORT:6379}
# spring.redis.password=${REDIS_PASSWORD:}
# spring.redis.username=${REDIS_USERNAME:}
# spring.redis.ssl=${REDIS_SSL:false}
# spring.redis.timeout=30000ms
# spring.redis.lettuce.pool.max-active=50
# spring.redis.lettuce.pool.max-idle=25
# spring.redis.lettuce.pool.min-idle=10
# spring.redis.lettuce.pool.max-wait=10000ms

# Removed duplicate - configured below


#spring.datasource.hikari.maximum-pool-size=1550
#spring.datasource.hikari.max-lifetime=100000
#spring.datasource.hikari.minimum-idle=100
#spring.datasource.hikari.validation-timeout=3000
#spring.datasource.hikari.idle-timeout=60000
spring.datasource.max-active=350 
spring.datasource.max-idle=350
spring.datasource.min-idle=350

# Minimum number of idle threads in Tomcat's thread pool
#server.tomcat.min-spare-threads=1000
#server.tomcat.max-connections=10000

# Maximum queue length for incoming connection requests
#server.tomcat.accept-count=1000
#async.executor.corePoolSize=1000
#async.executor.maxPoolSize=1000
#async.executor.queueCapacity=10000
#async.executor.threadNamePrefix=AsyncExecutorThread-
#server.tomcat.threads.max=1000s
#server.tomcat.threads.min-spare=1000

# ===========================================
# OPTIMIZED FOR t3.2xlarge (8 vCPU, 32GB RAM)
# ===========================================

# Server Configuration - Aggressive for Performance
server.tomcat.max-threads=800
server.tomcat.accept-count=2000
server.tomcat.min-spare-threads=200
server.tomcat.max-connections=20000

# Async Executor - High Performance
async.executor.corePoolSize=200
async.executor.maxPoolSize=400
async.executor.queueCapacity=5000
async.executor.threadNamePrefix=WarmupThread-

# Database Connection Pool - Optimized
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.hikari.minimum-idle=20
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000



spring.datasource.hikari.max-pool-size=15
#spring.datasource.hikari.idle-timeout=200000
#spring.datasource.hikari.max-lifetime=9000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.connection-test-query=SELECT 1




spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.data.mongodb.auto-index-creation=true

spring.datasource.hikari.minimum-idle=${HIKARI_MINIMUM_IDLE:50}
spring.datasource.hikari.maximum-pool-size=130
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000



# Disabled docs endpoints
# springdoc.swagger-ui.path=/docs/
# springdoc.api-docs.path=/api-docs
# springdoc.swagger-ui.tryItOutEnabled=true
# springdoc.swagger-ui.filter=true
# springdoc.swagger-ui.operationsSorter=alpha

# Minimal logging - Only errors and critical info
logging.level.org.springframework.web=ERROR
logging.level.org.springframework.security=ERROR
logging.level.org.springframework.data.mongodb=ERROR
logging.level.org.springframework.data.redis=WARN
logging.level.io.lettuce.core=ERROR
logging.level.org.hibernate=ERROR
logging.level.com.zaxxer.hikari=ERROR
logging.level.org.mongodb.driver=ERROR
logging.level.io.springfox=ERROR
logging.level.org.apache.tomcat=ERROR
logging.level.org.springframework.boot.autoconfigure=ERROR
logging.level.org.springframework.context=ERROR
logging.level.org.springframework.beans=ERROR

# Application logs - DEBUG for our app, ERROR for everything else  
logging.level.br.com.store24h=DEBUG
logging.level.br.com.store24h.store24h.services.core.PublicApiService=DEBUG
logging.level.br.com.store24h.services.CacheWarmingService=INFO
logging.level.br.com.store24h.apiv2.services.CacheService=INFO
logging.level.br.com.store24h.services.OperatorsCacheService=INFO
logging.level.br.com.store24h.services.OptimizedUserCacheService=INFO
logging.level.br.com.store24h.services.OptimizedPublicApiService=INFO
logging.level.root=ERROR

# Error visibility configuration
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false

# Application startup - minimal logging
logging.level.org.springframework.boot.SpringApplication=ERROR
logging.level.org.springframework.boot.web.embedded.tomcat=ERROR
logging.level.org.springframework.boot.web.embedded=ERROR

# Repository scanning warnings - silence them
logging.level.org.springframework.data.repository.config=ERROR
logging.level.org.springframework.data.redis.core=ERROR
logging.level.org.springframework.data.redis.connection=ERROR

# RabbitMQ configuration and logging
logging.level.org.springframework.amqp=INFO
logging.level.org.springframework.boot.autoconfigure.amqp=INFO
spring.rabbitmq.connection-timeout=30000ms
spring.rabbitmq.template.retry.enabled=true
spring.rabbitmq.template.retry.max-attempts=3


# ===========================================
# AGGRESSIVE CACHE WARMING CONFIGURATION
# ===========================================

# Priority Tables - FAST WARMUP (30 seconds)
cache.warming.chip_model_online.rate=30000
cache.warming.chip_model.rate=30000
cache.warming.sms_model.rate=30000
cache.warming.sms_string_model.rate=30000

# Critical Tables - MEDIUM WARMUP (60 seconds)
cache.warming.servicos.rate=60000
cache.warming.chip_number_control.rate=60000
cache.warming.v_operadoras.rate=60000

# Secondary Tables - STANDARD WARMUP (2 minutes)
cache.warming.users.rate=120000
cache.warming.numbers.rate=120000
cache.warming.configs.rate=120000
cache.warming.balance.rate=300000
cache.warming.operators.rate=120000

# Persistent Tables - FAST SYNC
cache.warming.cnc.incremental.rate=30000
cache.warming.cnc.reconcile.rate=300000
cache.warming.alias.incremental.rate=30000
cache.warming.alias.reconcile.rate=300000
cache.warming.api_key_index.rate=120000

# Actuator endpoints configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoint.info.enabled=true
management.endpoint.metrics.enabled=true
management.endpoints.web.base-path=/actuator
management.server.port=${server.port}

# Hikari/MySQL connection resilience (added)
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.max-lifetime=540000
spring.datasource.hikari.minimum-idle=5
# Note: maximum-pool-size remains configured below (130)
